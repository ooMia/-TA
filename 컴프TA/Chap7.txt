// 7-1
#include <stdio.h>
#include <Windows.h> //Sleep, Beep

int main()
{
	int time; scanf_s(" %d", &time);
	
	for (; time > 0; --time) {
		printf("%d ", time), Sleep(1000);
	}
	Beep(350, 500);

	return 0;
}


// 7-2
#include <stdio.h>

int main()
{
	int from = 1, to = 100, div = 3, result;

	// 1: (3+6+..+99) - O(n): brute force
	result = 0;
	for (int i = from; i <= to; ++i) {
		if (i % div == 0) result += i;
		// OR result += (i % div == 0) ? i : 0;
	}
	printf("1: %d\n", result);

	// 2: (3+6+..+99) - O(n/3)
	result = 0;
	for (int i = ((from / div) + (from % div != 0)) * div; i <= to; i += div) {
		result += i;
	}
	printf("2: %d\n", result);

	// 3: (1+2+..+33)*3 - O(n/3)
	result = 0;
	for (int i = (from / div) + (from % div != 0); i <= (to / div); ++i) {
		result += i;
	}
	printf("3: %d\n", result *= div);

	// 4: {(1+2+..+33)-(0+..+0)}*3 - O(1)
	int n = (from / div) + (from % div != 0);
	int m = (to / div);
	result = (m + n) * (m - n + 1) / 2;
	// OR result = (m * (m + 1) - n * (n - 1)) / 2;
	printf("4: %d\n", result *= div);

	printf("%d부터 %d 사이의 모든 %d의 배수의 합은 %d입니다.\n", from, to, div, result);

	return 0;
}

// 7-3
#include <stdio.h>

int main()
{
	int num;
	printf("정수를 입력하시오: "); scanf_s(" %d", &num);
	
	// 1: [1..60] - O(n): brute force
	printf("\n약수: ");
	for (int i = 1; i <= num; ++i) {
		if (num % i == 0) { printf("%d ", i); }
	}

	// 2: [1..7] - O(sqrt n)
	printf("\n약수: ");
	for (int i = 1; i*i <= num; ++i) {
		if (num % i == 0) {
			if (i * i == num) { printf("%d ", i); }
			else { printf("%d %d ", i, num / i); }
		}
	}

	// 3: [1..7] - O(sqrt n), Sorted
	printf("\n약수: ");
	int j = -1, stack[100];
	for (int i = 1; i * i <= num; ++i) {
		if (num % i == 0) {
			printf("%d ", i);
			if (i * i != num) { stack[++j] = (num / i); }
		}
	}
	while (j >= 0) { printf("%d ", stack[j--]); }

	return 0;
}

// 7-4
#include <stdio.h>

int main()
{
	int nLines = 7;

	// 1
	for (int row = 1; row <= nLines; ++row) {
		for (int space = nLines - row; space > 0; --space) { printf(" "); }
		for (int star = 1; star <= row; ++star) { printf("*"); }
		puts("");
	}

	// 2
	char str[8] = "       ";
	for (int row = 1; row <= nLines; ++row) {
		str[nLines - row] = '*';
		printf("%s\n", str);
	}

	// 3
	for (int row = 1; row <= nLines; ++row) {
		char blanks[8] = "       ";
		char stars[8] = "*******";
		
		blanks[nLines - row] = '\0';
		stars[row] = '\0';

		printf("%s%s\n", blanks, stars);
	}

	return 0;
}

// 7-5
#include <stdio.h>

int main()
{
	int num;
	printf("정수를 입력하시오: "); scanf_s(" %d", &num);

	// 1: O(n^2)
	for (int row = 1; row <= num; ++row) {
		for (int i = 1; i <= row; ++i) printf("%d ", i);
		puts("");
	}

	// 2: O(n)
	char str[100]; int i = 0;
	for (int n = 1; n <= num; ++n) {
		str[i++] = '0' + n;
		str[i++] = ' ';
	} str[i] = '\0';

	for (int j = -1, row = 1; row <= num; ++row) {
		str[j += 2] = '\0';
		if (j > 1) str[j - 2] = ' ';
		printf("%s\n", str);
	}

	return 0;
}

// 7-6
#include <stdio.h>
#include <stdlib.h> // exit

int calc(char op) {
	int n1, n2;
	printf("두 수를 공백으로 분리하여 입력하시오: ");
	scanf_s(" %d %d", &n1, &n2);
	switch (op)
	{
	case 'A': return n1 + n2;
	case 'S': return n1 - n2;
	case 'M': return n1 * n2;
	case 'D': return n1 / n2;
	default: printf("undefined operator\n"); exit(-1);
	}
}

int main()
{
	puts("*****************");
	puts("A---- Add");
	puts("S---- Subtract");
	puts("M---- Multiply");
	puts("D---- Devide");
	puts("Q---- Quit");
	puts("*****************");

	char op = 0;
	do {
		printf("연산을 선택하시오:");
		scanf_s(" %c", &op, 1);

		switch (op)
		{
		case 'A':case 'S':case 'M':case 'D':
			printf("%d\n", calc(op));
		}

		if (op == 'Q') break;
	} while (1);
	
	return 0;
}

// 7-7
#include <stdio.h>
#define FROM (2)
#define TO (100)

int main()
{
	int isPrime = 1;

	// 1: O(n^2) - brute force
	for (int num = FROM; num <= TO; ++num) {

		for (int n = 2; n < num; ++n) {
			if (num % n == 0) { isPrime = 0; break; }
		}

		if (isPrime) printf("%d ", num);
		else isPrime = 1;
	}
	
	puts("");

	// 2:  O(n * log log n) - Sieve of Eratosthenes
	char isNotPrime[TO + 1] = { 1,1,0, };
	for (int num = 2; num * num <= TO; ++num) {
		for (int i = num * 2; i <= TO; i += num)
			isNotPrime[i] = 1;
	}
	for (int num = FROM; num <= TO; ++num) {
		if (!isNotPrime[num]) printf("%d ", num);
	}

	return 0;
}

// 7-8
#include <stdio.h>

int main()
{
	int num;

	while (1) {
		printf("막대의 높이(종료: -1): "); scanf_s(" %d", &num);
		if (num == -1) break;
		else if (1 <= num && num <= 50) {
			for (int i = 0; i < num; ++i) printf("*");
			puts("");
		}
	}

	return 0;
}

// 7-9
#include <stdio.h>
#include <Windows.h>

int partialSum(int from, int to) {
	// sigma[k=1..to](k) - sigma[k=1..from](k-1)
	return (to + from) * (to - from + 1) / 2;
}

int main()
{
	int limit = 10000, sum, i, from, to;

	// 1: O(n) - brute force
	sum = i = 0;

	while (1) {
		if (sum > limit) break;
		else {
			i += 1;
			sum += i;
		}
	} sum -= i; i -= 1;

	printf("1부터 %d까지의 합이 %d입니다.\n", i, sum);

	// 2: O(n) - brute force, shorten
	sum = from = to = 1;
	while (sum <= limit) { sum += ++to; } sum -= to--;
	printf("%d부터 %d까지의 합이 %d입니다.\n", from, to, sum);

	// 3: O(log log n) - local optimization
	from = i = to = 1;

	// Macro Callibration
	while (partialSum(1, i) < limit) {
		to = (i *= 2);
		from = to / 2;
	}
	// Micro Callibration
	while (from != to - 1) {
		i = from + (to - from) / 2;
		if (partialSum(1, i) > limit) to = i; // [from, i]
		else from = i; // [i, to]
	}

	printf("1부터 %d까지의 합이 %d입니다.\n", from, partialSum(0, from));

	return 0;
}

// 7-10
#include <stdio.h>
#include <math.h>

int main()
{
	double num;	printf("실수의 값을 입력하시오: ");	scanf_s(" %lf", &num);
	int iter;	printf("거듭제곱횟수를 입력하시오: ");	scanf_s(" %d", &iter);
	

	// 1
	double result = 1;
	for (int i = iter; i > 0; --i) result *= num;
	printf("결과값은 %lf\n", result);
	
	// 2
	printf("결과값은 %lf\n", pow(num, (double)iter));

	return 0;
}

// 7-11
#include <stdio.h>

int main()
{
	int num, result;
	printf("n의 값을 입력하시오: "); scanf_s(" %d", &num);

	// 1: O(n)
	result = 0;
	for (int n = num; n > 0; --n) result += n * n;
	printf("계산값은 %d입니다.\n", result);

	// 2: O(1)
	result = num * (num + 1) * (2 * num + 1) / 6;
	printf("계산값은 %d입니다.\n", result);

	return 0;
}

// 7-12
#include <stdio.h>
#include <string.h> // memset
#define MAX_NUM (1000)

int fibonacci_2(int n) {
	if (n <= 1) return n;
	else return fibonacci_2(n - 1) + fibonacci_2(n - 2);
}

int mem[MAX_NUM];
int fibonacci_3(int n) {
	if (mem[n] != -1) return mem[n];
	else {
		mem[n] = fibonacci_3(n - 2) + fibonacci_3(n - 1);
		return mem[n];
	}
}

int main()
{
	int num;
	printf("몇번째 항까지 구할까요? "); scanf_s(" %d", &num);

	// 1: O(n)
	int a = 0, b = 1, c = a + b;
	if (num >= 0) printf("%d", a);
	if (num >= 1) printf(", %d", b);
	for (int i = 2; i <= num; ++i) {
		printf(", %d", c);
		a = b, b = c, c = a + b;
	}

	puts("");
	
	// 2: O(2^n) - recursive function call
	if (num >= 0) printf("0");
	for (int i = 1; i <= num; ++i) {
		printf(", %d", fibonacci_2(i));
	}

	puts("");

	// 3: O(N) - dynamic programming
	memset(mem, -1, sizeof(int) * MAX_NUM);
	// OR memset(mem, 0xff, sizeof(int) * MAX_NUM);
	mem[0] = 0, mem[1] = 1;

	if (num >= 0) printf("0");
	for (int i = 1; i <= num; ++i) {
		printf(", %d", fibonacci_3(i));
	}

	return 0;
}

// 7-13
#include <stdio.h>
#include <stdlib.h> // malloc exit

#define MAX_NUM (12)
typedef unsigned long long ull;

ull* mem[MAX_NUM][MAX_NUM] = { NULL, };

ull Permutation_2(ull n, ull r)
{
	if (r == 0) return 1;
	else if (r == 1) return n;
	else if (mem[n][r] != NULL) return *mem[n][r];

	mem[n][r] = (ull*)malloc(sizeof(ull));
	if (mem[n][r] == NULL) exit(-1);
	else if (n - r <= 1) { *mem[n][r] = n * Permutation_2(n - 1, r - 1); }
	else *mem[n][r] // n_P_r = n-1_P_r + n-1_P_r-1 * r
		= Permutation_2(n - 1, r) + Permutation_2(n - 1, r - 1) * r;
	return *mem[n][r];
}

int main()
{
	ull n, r, nPr = 1;
	printf("n의 값:\t"); scanf_s(" %lld", &n);
	printf("r의 값:\t"); scanf_s(" %lld", &r);

	// 1
	for (ull i = n; i >= (n - r + 1); --i) { nPr *= i; }
	printf("순열의 값은 %lld입니다.\n", nPr);

	// 2 - dynamic programming
	printf("순열의 값은 %lld입니다.", Permutation_2(n,r));

	return 0;
}

// 7-14
#include <stdio.h>

int main()
{
	int num;
	printf("정수를 입력하시오: "); scanf_s(" %d", &num);

	do {
		printf("%d", num % 10);
	} while ((num /= 10) != 0);

	return 0;
}
